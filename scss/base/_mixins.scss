//------------------------------------//
//  $MIXINS
//------------------------------------//

// Micro clearfix, as per: nicolasgallagher.com/micro-clearfix-hack
@mixin clearfix {
  *zoom: 1;

  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after { clear: both; }
}

@mixin inline-block {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

// Image replacement
@mixin hide-text {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// WebKit-style focus
@mixin tab-focus {
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Placeholder text
@mixin placeholder {
  &:-moz-placeholder { @content; } // Firefox 4-18
  &::-moz-placeholder { opacity: 1; @content; } // Firefox 19+
  &:-ms-input-placeholder { @content; } // Internet Explorer 10+
  &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

// Form validation states
@mixin form-control-validation($text-color: $gray-dark, $border-color: $gray) {
  label,
  .radio,
  .checkbox { color: $text-color; }

  .form-control {
    border-color: $border-color;

    &:focus {
      border-color: darken($border-color, 10%);
      @include box-shadow(0 0 6px lighten($border-color, 20%));
    }
  }
}

// Form control focus state, based on WebKit's default styles
@mixin form-control-focus($color: #66afe9) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);

  &:focus {
    border-color: $color;
    outline: 0;
    @include box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px $color-rgba);
  }
}


// ***************************************************************************
// Rem conversion mixin
//
// Converts values to rems for any property passed to it. If optional
// $fallback is provided, it returns two lines of code â€” one of the pixel
// values for non-rem support and another with the converted rem values.
// It also returns just the pixel values to the legacy IE CSS file.
//
// USAGE:
//
// .element {
//    @include rem(padding, 4 0 2 1);
//    @include rem(font-size, 2, $base-font-size);
// }
//
// OUTPUT:
//
// .element {
//    padding: 4rem 0 2rem 1rem;
//    font-size: 32px;
//    font-size: 2rem;
// }
//
// OUTPUT TO LEGACY CSS:
//
// .element {
//    padding: 64px 0 32px 16px;
//    font-size: 32px;
// }
//
// ***************************************************************************

@mixin rem($property, $rem-values, $fallback: false) {
  @if not $legacy-ie {
    // Pixel fallbacks.
    // $fallback should be $base-font-size or $base-font-size--mobile.
    @if $fallback {
      #{$property}: map(
        force-unit,
        map(multiply, $rem-values, $fallback),
        px
      );
    }
    #{$property}: map(force-unit, $rem-values, rem);
  } @else {
    // Calculate pixel values for legacy browsers that don't support rems.
    #{$property}: map(
      force-unit,
      map(multiply, $rem-values, $base-font-size),
      px
    );
  }
}

// ***************************************************************************
// Retina images mixin
//
// via http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// modified to calculate image dimensions automatically
//
// USAGE:
//
// .logo {
//    background: image-url("logo_32x32.png") no-repeat;
//    @include image-2x("logo_32x32@2x.png", 64px, 64px);
// }
//
// OR
//
// .logo {
//    background: image-url("logo_32x32.png") no-repeat;
//    @include image-2x("logo_32x32@2x.png"); // no dimensions passed in
// }
//
// If dimensions are omitted, the mixin will try to guess them using
// image-width and image-height helpers. This only works if compass can find
// the image file locally, however.
//
// ***************************************************************************

@mixin image-2x($image, $width:"", $height:"") {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    // on retina, use image that is scaled by 2
    background-image: url($image);

    @if $width != "" {
      // dimensions ARE passed in, use them
      @include background-size($width $height);
    } @else {
      // dimensions NOT passed in, try to calculate them automatically
      @include background-size(floor(image-width($image)/2) floor(image-height($image)/2));
    }
  }
}


// ***************************************************************************
// Media query mixins
//
// All styles w/o a media-query are assumed to be base, mobile-first styles.
// All styling "up" from that should be done in media queries.
//
//
// hand-and-up  -  bigger-than-phone and up
// lap-and-up   -  tablets and up
// desk-and-up  -  desktops/laptops and up
// wall-and-up  -  widescreen desktops and up
// below-hand   -  isolates phones
// below-lap    -  smaller than tablets
// below-desk   -  smaller than desktops/laptops
//
//
// ***************************************************************************

// Don't call this directly. Use the other mixins below.
@mixin media-query($breakpoint, $expression, $no-legacy: false) {
  @if $legacy-ie {
    @if $no-legacy { } @else { @content; }
  } @else {
    @if $breakpoint {
      @media only screen and (unquote($expression)) { @content; }
    } @else { @content; }
  }
}

@mixin hand-and-up {
  @include media-query(
    $hand-start,
    "min-width:#{$hand-start}"
  ) { @content; }
}

@mixin lap-and-up {
  @include media-query(
    $lap-start,
    "min-width: #{$lap-start}"
  ) { @content; }
}

@mixin desk-and-up {
  @include media-query(
    $desk-start,
    "min-width:#{$desk-start}"
  ) { @content; }
}

@mixin wall-and-up {
  @include media-query(
    $wall-start,
    "min-width:#{$wall-start}",
    $no-legacy: true
  ) { @content; }
}

@mixin below-hand {
  @include media-query(
    $hand-start,
    "max-width:#{$hand-start - 1}",
    $no-legacy: true
  ) { @content; }
}

@mixin below-lap {
  @include media-query(
    $lap-start,
    "max-width:#{$lap-start - 1}",
    $no-legacy: true
  ) { @content; }
}

@mixin below-desk {
  @include media-query(
    $desk-start,
    "max-width:#{$desk-start - 1}",
    $no-legacy: true
  ) { @content; }
}
